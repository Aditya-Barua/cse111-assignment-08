# -*- coding: utf-8 -*-
"""Assignment 08_21101004_Aditya Barua.ipnyb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CnvzCgLF_h5BhJ6NBytdYCv6c7yxLCTx
"""

#Task - 01

class RealNumber:

    def __init__(self, r=0):
        self.__realValue = r
    def getRealValue(self):
        return self.__realValue
    def setRealValue(self, r):
        self.__realValue = r
    def __str__(self):
        return 'RealPart: '+str(self.getRealValue())


class ComplexNumber(RealNumber):
    def __init__(self, r=1,i=1):
        super().__init__(r=float(r))
        self.i = float(i)
    def __str__(self):
        return f'{super().__str__()} \nImaginaryPart: {self.i}'


cn1 = ComplexNumber()
print(cn1)
print('---------')
cn2 = ComplexNumber(5,7)
print(cn2)

#Task - 02
class RealNumber:
    def __init__(self, number=0):
        self.number = number
    def __add__(self, anotherRealNumber):
        return self.number + anotherRealNumber.number
    def __sub__(self, anotherRealNumber):
        return self.number - anotherRealNumber.number
    def __str__(self):
        return str(self.number)
        
class ComplexNumber(RealNumber):
    def __init__(self,var1,var2):
        super().__init__(var1)
        self.var2 = var2 
    def __add__(self, other):
        return ("{} + {}i".format(super().__add__(other.number),(self.var2 + other.var2)))
    def __sub__(self, other):
        return ("{} - {}i".format(super().__sub__(other.number),(other.var2 - self.var2)))
    def __str__(self):
        return ("{} + {}i".format(self.number,self.var2))

r1 = RealNumber(3)
r2 = RealNumber(5)
print(r1+r2)
cn1 = ComplexNumber(2, 1)
print(cn1)
cn2 = ComplexNumber(r1, 5)
print(cn2)
cn3 = cn1 + cn2
print(cn3)
cn4 = cn1 - cn2
print(cn4)

#Task - 03
class Account:
    def __init__(self, balance):
        self._balance = balance
    def getBalance(self):
        return self._balance

class CheckingAccount(Account):
    numberOfAccount = 0
    def __init__(self, balance = 0):
        CheckingAccount.numberOfAccount += 1
        super().__init__(balance)

    def __str__(self):
        return f"Account Balance:{super().getBalance():.2f}"



print('Number of Checking Accounts:',CheckingAccount.numberOfAccount)
print(CheckingAccount())
print(CheckingAccount(100.00))
print(CheckingAccount(200.00))
print('Number of Checking Accounts:',CheckingAccount.numberOfAccount)

#Task - 04
class Fruit:
    def __init__(self, formalin=False, name=''):
        self.__formalin = formalin
        self.name = name
    def getName(self):
        return self.name
    def hasFormalin(self):
        return self.__formalin
class testFruit:
    def test(self, f):
        print('----Printing Detail----')
        if f.hasFormalin():
            print('Do not eat the',f.getName(),'.')
            print(f)
        else:
            print('Eat the',f.getName(),'.')
            print(f)
class Mango(Fruit):
    def __init__(self):
        super().__init__(True,'Mango')
    def __str__(self):
        return 'Mangos are bad for you'
class Jackfruit (Fruit):
    def __init__(self):
        super().__init__(False,'Jackfruit')
    def __str__(self):
        return 'Jackfruits are good for you'
        
m = Mango()
j = Jackfruit()
t1 = testFruit()
t1.test(m)
t1.test(j)

#Task - 05
class Exam: 
    def __init__(self,marks):
        self.marks = marks
        self.time = 60
    def examSyllabus(self): 
        return "Maths , English" 
    def examSchedule(self): 
        return "Part 1 - Maths\nPart 2 - English\n"

class ScienceExam(Exam):
    def __init__(self,marks,time,*vars):
        super().__init__(marks)
        self.time = time
        self.vars = list (vars)
        self.var =len(self.vars) + 2

    def __str__(self):
        return f'Marks:{self.marks} Time:{self.time} mintues Number of parts: {self.var}'
        
    def examSyllabus(self):
        var2 = super().examSyllabus()
        var3 = str(var2)
        for i in range(len(self.vars)):
            var3 += "," + str (self.vars[i])
        return var3

    def examParts(self):
        var4 = super().examSchedule()
        var3 = str (var4)
        for i in range(len(self.vars)):
            var6 = 3 + i
            if i == (len(self.vars)-1):
                var3 += "Part " + str (var6) + "-" + str (self.vars[i])
            else:
                var3 += "Part " + str (var6) + "-" + str (self.vars[i]) + "\n"
        return var3




engineering = ScienceExam(100,90,"Physics","HigherMaths")
print(engineering)
print('----------------------------------')
print(engineering.examSyllabus())
print(engineering.examParts())
print('==================================')
architecture = ScienceExam(100,120,"Physics","HigherMaths","Drawing")
print(architecture)
print('----------------------------------')
print(architecture.examSyllabus())
print(architecture.examParts())

#Task - 06
class Shape3D:
    pi = 3.14159
    def __init__(self, name = 'Default', radius = 0):
        self._area = 0 
        self._name = name
        self._height = 'No need' 
        self._radius = radius 
    def calc_surface_area(self):
        return 2 * Shape3D.pi * self._radius 
    def __str__(self):
        return "Radius: "+str(self._radius)
class Sphere(Shape3D):
    def __init__(self,name,radius):
        super(Sphere, self).__init__(name,radius)
        print('Shape Name:',self._name,', Area Formula: 4 * pi * r * r')
        self._radius=radius
    def calc_surface_area(self):
        area= Shape3D.calc_surface_area(self)*2*self._radius
        self._area=area
    def __str__(self):
        return Shape3D.__str__(self)+', Height: '+str(self._height)+'\n'+'Area:'+str(self._area)
class Cylinder(Shape3D):
    def __init__(self,name,radius,height):
        super(Cylinder, self).__init__(name,radius)
        self._height=height
        print('Shape Name:',self._name,'Area Formula:2 * pi * r * (r + h)')
    def calc_surface_area(self):
        area=Shape3D.calc_surface_area (self)*(self._radius + self._height)
        self._area=area
    def __str__(self):
        return Shape3D.__str__(self) + ', Height: ' + str(self._height) + '\n' + 'Area:'+str(self._area)
        
sph = Sphere('Sphere', 5)
print('==================================')
sph.calc_surface_area()
print(sph)
print('----------------------------------')
cyl = Cylinder('Cylinder', 5, 10)
print('==================================')
cyl.calc_surface_area()
print(cyl)

#Task - 07
class PokemonBasic:
  def __init__(self, name = 'Default', hp = 0,weakness = 'None', type = 'Unknown'):
    self.name = name
    self.hit_point = hp
    self.weakness = weakness
    self.type = type
  def get_type(self):
    return 'Main type: ' + self.type
  def get_move(self):
    return 'Basic move: ' + 'Quick Attack'
  def __str__(self):
    return "Name: " + self.name + ", HP: " + str(self.hit_point) + ", Weakness: " + self.weakness



class PokemonExtra(PokemonBasic):
   def __init__(self, name, hp, weak, type, sec='', other=()):
      super(PokemonExtra, self).__init__(name, hp, weak, type)
      self.sec = sec
      self.other = other
   def get_type(self):
      if self.sec == '' and self.other == ():
         return 'Main type: ' + self.type
      else:
         return 'Main type: ' + self.type + ', Secondary type: ' + self.sec
   def get_move(self):
      if self.other == ():
         return 'Basic move: ' + 'Quick Attack'
      else:
         var = ''
         for i in self.other:
            var += i + ','
         var = var[:-1]
         return 'Basic move: ' + 'Quick Attack'  + '\n' + 'Other move: ' + var



print('\n------------Basic Info:--------------')
pk = PokemonBasic()
print(pk)
print(pk.get_type())
print(pk.get_move())
print('\n------------Pokemon 1 Info:-------------')
charmander = PokemonExtra('Charmander', 39, 'Water', 'Fire')
print(charmander)
print(charmander.get_type())
print(charmander.get_move())
print('\n------------Pokemon 2 Info:-------------')
charizard = PokemonExtra('Charizard', 78, 'Water', 'Fire', 'Flying', ('Fire Spin', 'Fire Blaze'))
print(charizard)
print(charizard.get_type())
print(charizard.get_move())

#Task - 08
class Team:
  def __init__(self, name):
    self.name = "default"
    self.total_player = 5
  def info(self):
    print("We love sports")



class FootBallTeam(Team):
    def __init__(self, name):
        self.name = name
        self.total_player = 11
    def info(self):
        print("Our name is", self.name)
        print("We play Football")
        Team.info(self)
class CricketTeam(Team):
    def __init__(self, name):
        self.name = name      
        self.total_player = 11
    def info(self):
        print("Our name is", self.name)
        print("We play Cricket")
        Team.info(self)


class Team_test:
  def check(self, tm):
    print("=========================")
    print("Total Player:", tm.total_player)
    tm.info()

f = FootBallTeam("Brazil")
c = CricketTeam("Bangladesh")
test = Team_test()
test.check(f)
test.check(c)

#Task - 09
class Pokemon:
  def __init__(self, p):
    self.pokemon = p
    self.pokemon_type = "Needs to be set"
    self.pokemon_weakness = "Needs to be set"
  def kind(self):
    return self.pokemon_type 
  def weakness(self):
    return self.pokemon_weakness
  def what_am_i(self):
    print("I am a Pokemon.")



class Pikachu(Pokemon):
   def __init__(self):
      self.pokemon = "Pikachu"
      self.pokemon_type = "Electric"
      self.pokemon_weakness = "Ground"
   def what_am_i(self):
      super().what_am_i()
      print("I am Pikachu.")
class Charmander(Pokemon):
   def __init__(self):
      self.pokemon = "Charmander"
      self.pokemon_type = "Fire"
      self.pokemon_weakness = "Water, Ground and Rock"
   def what_am_i(self):
      super().what_am_i()
      print("I am Charmander.")




pk1 = Pikachu()
print("Pokemon:", pk1.pokemon)
print("Type:", pk1.kind())
print("Weakness:", pk1.weakness())
pk1.what_am_i()
print("========================")
c1 = Charmander()
print("Pokemon:", c1.pokemon)
print("Type:", c1.kind())
print("Weakness:", c1.weakness())
c1.what_am_i()

#Task - 10
class Department:
  def __init__(self, s):
    self.semester = s
    self.name = "Default"
    self.id = -1
  def student_info(self):
    print("Name:", self.name)
    print("ID:", self.id)
  def courses(self, c1, c2, c3):
    print("No courses Approved yet!")



class CSE(Department):
   def __init__(self, name, id, semester):
      super().__init__(semester)
      self. name = name
      self.id = id
   def courses(self, course1, course2, course3):
      print(f"Courses Approved to this CSE student in {self.semester} semester : ")
      print(f"{course1}\n{course2}\n{course3}")
class EEE(Department):
   def __init__(self, name, id, semester):
      super().__init__(semester)
      self.name = name
      self.id = id
   def courses(self, course1, course2, course3):
      print(f"Courses Approved to this EEE student in {self.semester} semester : ")
      print(f"{course1}\n{course2}\n{course3}")




s1 = CSE("Rahim", 16101328,"Spring2016")
s1.student_info()
s1.courses("CSE110", "MAT110", "ENG101")
print("==================")
s2 = EEE("Tanzim", 18101326, "Spring2018")
s2.student_info()
s2.courses("Mat110", "PHY111", "ENG101")
print("==================")
s3 = CSE("Rudana", 18101326, "Fall2017")
s3.student_info()
s3.courses("CSE111", "PHY101", "MAT120")
print("==================")
s4 = EEE("Zainab", 19201623, "Summer2019")
s4.student_info()
s4.courses("EEE201", "PHY112", "MAT120")